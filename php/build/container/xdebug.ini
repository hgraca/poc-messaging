;zend_extension = xdebug

xdebug.cli_color = 1
;xdebug.client_discovery_header = ""
; client_host needs to be whatever comes out of `make docker-create-network`,
; but we don't need to set this up because we use `xdebug.start_with_request = yes`
;xdebug.client_host = 172.30.0.1
;xdebug.client_port = 9003
;xdebug.collect_assignments = false
;xdebug.collect_return = false
;xdebug.connect_timeout_ms = 200
xdebug.discover_client_host = true
;xdebug.dump.COOKIE = Empty
;xdebug.dump.FILES = Empty
;xdebug.dump.GET = Empty
;xdebug.dump.POST = Empty
;xdebug.dump.REQUEST = Empty
;xdebug.dump.SERVER = Empty
;xdebug.dump.SESSION = Empty
;xdebug.dump_globals = true
;xdebug.dump_once = true
;xdebug.dump_undefined = false
xdebug.file_link_format = 'phpstorm://open?file=%f&line=%l'
;xdebug.filename_format = ...%s%n
xdebug.force_display_errors = 1
xdebug.force_error_reporting = 1
;xdebug.gc_stats_output_name = gcstats.%p
;xdebug.halt_level = 0
xdebug.idekey = PHPSTORM
xdebug.log = /var/www/var/xdebug.log
;xdebug.log_level = 7
;	0	Criticals		Errors in the configuration
;	1	Errors			Connection errors
;	3	Warnings		Connection warnings
;	5	Communication	Protocol messages
;	7	Information		Information while connecting
;	10	Debug			Breakpoint resolving information
;xdebug.max_nesting_level = 256
;xdebug.max_stack_frames = -1
xdebug.mode = develop,debug
;	off			Nothing is enabled. Xdebug does no work besides checking whether functionality is enabled. Use this setting if you want close to 0 overhead.
;	develop		Enables Development Aids including the overloaded var_dump().
;	coverage	Enables Code Coverage Analysis to generate code coverage reports, mainly in combination with PHPUnit.
;	debug		Enables Step Debugging. This can be used to step through your code while it is running, and analyse values of variables.
;	gcstats		Enables Garbage Collection Statistics to collect statistics about PHP's Garbage Collection Mechanism.
;	profile		Enables Profiling, with which you can analyse performance bottlenecks with tools like KCacheGrind.
;	trace		Enables the Function Trace feature, which allows you record every function call, including arguments, variable assignment, and return value that is made during a request to a file.
;	You can enable multiple modes at the same time by comma separating their identifiers as value to xdebug.mode: xdebug.mode=develop,trace.
;	You can also set the mode by setting the XDEBUG_MODE environment variable on the command-line
xdebug.output_dir = /var/www/var/xdebug
;xdebug.profiler_append = 0
;xdebug.profiler_output_name = cachegrind.out.%p
;xdebug.scream = false
;xdebug.show_error_trace = 0
;xdebug.show_exception_trace = 0
;xdebug.show_local_vars = 0
;xdebug.start_upon_error = no
xdebug.start_with_request = yes
;	The default value depends on xdebug.mode:
;	debug: trigger
;	gcstats: no
;	profile: yes
;	trace: trigger
;xdebug.trace_format = 0
;xdebug.trace_options = 0
;xdebug.trace_output_name = trace.%c
;xdebug.trigger_value = ""
;xdebug.var_display_max_children = 128
;xdebug.var_display_max_data = 512
xdebug.var_display_max_depth = 5
